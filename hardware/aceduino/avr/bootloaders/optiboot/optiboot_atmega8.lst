
optiboot_atmega8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fc  00001e00  00001e00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00001ffe  00001ffe  00000250  2**0
                  CONTENTS, READONLY
  2 .data         00000000  00800060  00800060  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000011  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000263  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004f0  00000000  00000000  0000028b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ff  00000000  00000000  0000077b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003cb  00000000  00000000  0000097a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00000d48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a6  00000000  00000000  00000dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000323  00000000  00000000  00000f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  0000129d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00001e00 <main>:
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
    1e00:	11 24       	eor	r1, r1
#ifdef __AVR_ATmega8__
  SP=RAMEND;  // This is done by hardware reset
    1e02:	8f e5       	ldi	r24, 0x5F	; 95
    1e04:	94 e0       	ldi	r25, 0x04	; 4
    1e06:	9e bf       	out	0x3e, r25	; 62
    1e08:	8d bf       	out	0x3d, r24	; 61
#endif

  // Adaboot no-wait mod
  ch = MCUSR;
    1e0a:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    1e0c:	14 be       	out	0x34, r1	; 52
  if (!(ch & _BV(EXTRF))) appStart();
    1e0e:	81 ff       	sbrs	r24, 1
    1e10:	ef d0       	rcall	.+478    	; 0x1ff0 <appStart>

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    1e12:	85 e0       	ldi	r24, 0x05	; 5
    1e14:	8e bd       	out	0x2e, r24	; 46
#endif
#ifndef SOFT_UART
#ifdef __AVR_ATmega8__
  UCSRA = _BV(U2X); //Double speed mode USART
    1e16:	82 e0       	ldi	r24, 0x02	; 2
    1e18:	8b b9       	out	0x0b, r24	; 11
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
    1e1a:	88 e1       	ldi	r24, 0x18	; 24
    1e1c:	8a b9       	out	0x0a, r24	; 10
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
    1e1e:	96 e8       	ldi	r25, 0x86	; 134
    1e20:	90 bd       	out	0x20, r25	; 32
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    1e22:	97 e6       	ldi	r25, 0x67	; 103
    1e24:	99 b9       	out	0x09, r25	; 9
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    1e26:	81 bd       	out	0x21, r24	; 33
  WDTCSR = x;
    1e28:	8e e0       	ldi	r24, 0x0E	; 14
    1e2a:	81 bd       	out	0x21, r24	; 33

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_1S);

  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    1e2c:	bd 9a       	sbi	0x17, 5	; 23
    1e2e:	86 e0       	ldi	r24, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    1e30:	48 e1       	ldi	r20, 0x18	; 24
    1e32:	5e ef       	ldi	r21, 0xFE	; 254
    TIFR1 = _BV(TOV1);
    1e34:	34 e0       	ldi	r19, 0x04	; 4
    while(!(TIFR1 & _BV(TOV1)));
#ifdef __AVR_ATmega8__
    LED_PORT ^= _BV(LED);
    1e36:	20 e2       	ldi	r18, 0x20	; 32
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    1e38:	5d bd       	out	0x2d, r21	; 45
    1e3a:	4c bd       	out	0x2c, r20	; 44
    TIFR1 = _BV(TOV1);
    1e3c:	38 bf       	out	0x38, r19	; 56
    while(!(TIFR1 & _BV(TOV1)));
    1e3e:	08 b6       	in	r0, 0x38	; 56
    1e40:	02 fe       	sbrs	r0, 2
    1e42:	fd cf       	rjmp	.-6      	; 0x1e3e <main+0x3e>
#ifdef __AVR_ATmega8__
    LED_PORT ^= _BV(LED);
    1e44:	98 b3       	in	r25, 0x18	; 24
    1e46:	92 27       	eor	r25, r18
    1e48:	98 bb       	out	0x18, r25	; 24
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1e4a:	a8 95       	wdr
    1e4c:	81 50       	subi	r24, 0x01	; 1
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    1e4e:	a1 f7       	brne	.-24     	; 0x1e38 <main+0x38>
   * Making these local and in registers prevents the need for initializing
   * them, and also saves space because code no longer stores to memory.
   * (initializing address keeps the compiler happy, but isn't really
   *  necessary, and uses 4 bytes of flash.)
   */
  register uint16_t address = 0;
    1e50:	d0 e0       	ldi	r29, 0x00	; 0
    1e52:	c0 e0       	ldi	r28, 0x00	; 0
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    1e54:	98 e1       	ldi	r25, 0x18	; 24
    1e56:	e9 2e       	mov	r14, r25
  WDTCSR = x;
    1e58:	28 e0       	ldi	r18, 0x08	; 8
    1e5a:	d2 2e       	mov	r13, r18
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    1e5c:	cc 24       	eor	r12, r12
    1e5e:	c3 94       	inc	r12
        addrPtr += 2;
      } while (--ch);

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    1e60:	35 e0       	ldi	r19, 0x05	; 5
    1e62:	93 2e       	mov	r9, r19
      boot_spm_busy_wait();

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    1e64:	41 e1       	ldi	r20, 0x11	; 17
    1e66:	84 2e       	mov	r8, r20
      do *bufPtr++ = getch();
      while (--length);

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    1e68:	53 e0       	ldi	r21, 0x03	; 3
    1e6a:	f5 2e       	mov	r15, r21
#endif

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
    1e6c:	a5 d0       	rcall	.+330    	; 0x1fb8 <getch>

    if(ch == STK_GET_PARAMETER) {
    1e6e:	81 34       	cpi	r24, 0x41	; 65
    1e70:	81 f4       	brne	.+32     	; 0x1e92 <main+0x92>
      unsigned char which = getch();
    1e72:	a2 d0       	rcall	.+324    	; 0x1fb8 <getch>
    1e74:	18 2f       	mov	r17, r24
      verifySpace();
    1e76:	a7 d0       	rcall	.+334    	; 0x1fc6 <verifySpace>
      if (which == 0x82) {
    1e78:	12 38       	cpi	r17, 0x82	; 130
    1e7a:	19 f4       	brne	.+6      	; 0x1e82 <main+0x82>
	/*
	 * Send optiboot version as "minor SW version"
	 */
	putch(OPTIBOOT_MINVER);
    1e7c:	84 e0       	ldi	r24, 0x04	; 4
    1e7e:	98 d0       	rcall	.+304    	; 0x1fb0 <putch>
    1e80:	94 c0       	rjmp	.+296    	; 0x1faa <main+0x1aa>
      } else if (which == 0x81) {
    1e82:	11 38       	cpi	r17, 0x81	; 129
    1e84:	19 f4       	brne	.+6      	; 0x1e8c <main+0x8c>
	  putch(OPTIBOOT_MAJVER);
    1e86:	84 e0       	ldi	r24, 0x04	; 4
    1e88:	93 d0       	rcall	.+294    	; 0x1fb0 <putch>
    1e8a:	8f c0       	rjmp	.+286    	; 0x1faa <main+0x1aa>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    1e8c:	83 e0       	ldi	r24, 0x03	; 3
    1e8e:	90 d0       	rcall	.+288    	; 0x1fb0 <putch>
    1e90:	8c c0       	rjmp	.+280    	; 0x1faa <main+0x1aa>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    1e92:	82 34       	cpi	r24, 0x42	; 66
    1e94:	19 f4       	brne	.+6      	; 0x1e9c <main+0x9c>
      // SET DEVICE is ignored
      getNch(20);
    1e96:	84 e1       	ldi	r24, 0x14	; 20
    1e98:	a0 d0       	rcall	.+320    	; 0x1fda <getNch>
    1e9a:	87 c0       	rjmp	.+270    	; 0x1faa <main+0x1aa>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    1e9c:	85 34       	cpi	r24, 0x45	; 69
    1e9e:	19 f4       	brne	.+6      	; 0x1ea6 <main+0xa6>
      // SET DEVICE EXT is ignored
      getNch(5);
    1ea0:	85 e0       	ldi	r24, 0x05	; 5
    1ea2:	9b d0       	rcall	.+310    	; 0x1fda <getNch>
    1ea4:	82 c0       	rjmp	.+260    	; 0x1faa <main+0x1aa>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    1ea6:	85 35       	cpi	r24, 0x55	; 85
    1ea8:	49 f4       	brne	.+18     	; 0x1ebc <main+0xbc>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    1eaa:	86 d0       	rcall	.+268    	; 0x1fb8 <getch>
    1eac:	c8 2f       	mov	r28, r24
    1eae:	d0 e0       	ldi	r29, 0x00	; 0
      newAddress = (newAddress & 0xff) | (getch() << 8);
    1eb0:	83 d0       	rcall	.+262    	; 0x1fb8 <getch>
    1eb2:	d8 2b       	or	r29, r24
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    1eb4:	cc 0f       	add	r28, r28
    1eb6:	dd 1f       	adc	r29, r29
      address = newAddress;
      verifySpace();
    1eb8:	86 d0       	rcall	.+268    	; 0x1fc6 <verifySpace>
    1eba:	77 c0       	rjmp	.+238    	; 0x1faa <main+0x1aa>
    }
    else if(ch == STK_UNIVERSAL) {
    1ebc:	86 35       	cpi	r24, 0x56	; 86
    1ebe:	29 f4       	brne	.+10     	; 0x1eca <main+0xca>
      // UNIVERSAL command is ignored
      getNch(4);
    1ec0:	84 e0       	ldi	r24, 0x04	; 4
    1ec2:	8b d0       	rcall	.+278    	; 0x1fda <getNch>
      putch(0x00);
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	74 d0       	rcall	.+232    	; 0x1fb0 <putch>
    1ec8:	70 c0       	rjmp	.+224    	; 0x1faa <main+0x1aa>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    1eca:	84 36       	cpi	r24, 0x64	; 100
    1ecc:	09 f0       	breq	.+2      	; 0x1ed0 <main+0xd0>
    1ece:	45 c0       	rjmp	.+138    	; 0x1f5a <main+0x15a>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

      getch();			/* getlen() */
    1ed0:	73 d0       	rcall	.+230    	; 0x1fb8 <getch>
      length = getch();
    1ed2:	72 d0       	rcall	.+228    	; 0x1fb8 <getch>
    1ed4:	78 2e       	mov	r7, r24
      getch();
    1ed6:	70 d0       	rcall	.+224    	; 0x1fb8 <getch>
    1ed8:	00 e0       	ldi	r16, 0x00	; 0
    1eda:	11 e0       	ldi	r17, 0x01	; 1

      // If we are in RWW section, immediately start page erase
      if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    1edc:	c1 15       	cp	r28, r1
    1ede:	88 e1       	ldi	r24, 0x18	; 24
    1ee0:	d8 07       	cpc	r29, r24
    1ee2:	30 f4       	brcc	.+12     	; 0x1ef0 <main+0xf0>
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	f7 be       	out	0x37, r15	; 55
    1ee8:	e8 95       	spm
    1eea:	00 e0       	ldi	r16, 0x00	; 0
    1eec:	11 e0       	ldi	r17, 0x01	; 1
    1eee:	00 c0       	rjmp	.+0      	; 0x1ef0 <main+0xf0>

      // While that is going on, read in page contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    1ef0:	58 01       	movw	r10, r16
    1ef2:	ff ef       	ldi	r31, 0xFF	; 255
    1ef4:	af 1a       	sub	r10, r31
    1ef6:	bf 0a       	sbc	r11, r31
    1ef8:	5f d0       	rcall	.+190    	; 0x1fb8 <getch>
    1efa:	f8 01       	movw	r30, r16
    1efc:	80 83       	st	Z, r24
    1efe:	85 01       	movw	r16, r10
      while (--length);
    1f00:	7a 10       	cpse	r7, r10
    1f02:	f6 cf       	rjmp	.-20     	; 0x1ef0 <main+0xf0>

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    1f04:	c1 15       	cp	r28, r1
    1f06:	f8 e1       	ldi	r31, 0x18	; 24
    1f08:	df 07       	cpc	r29, r31
    1f0a:	18 f0       	brcs	.+6      	; 0x1f12 <main+0x112>
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	f7 be       	out	0x37, r15	; 55
    1f10:	e8 95       	spm

      // Read command terminator, start reply
      verifySpace();
    1f12:	59 d0       	rcall	.+178    	; 0x1fc6 <verifySpace>

      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
    1f14:	07 b6       	in	r0, 0x37	; 55
    1f16:	00 fc       	sbrc	r0, 0
    1f18:	fd cf       	rjmp	.-6      	; 0x1f14 <main+0x114>
    1f1a:	fe 01       	movw	r30, r28
        buff[1] = 0xce; // rjmp 0x1d00 instruction
      }
#endif

      // Copy buffer into programming buffer
      bufPtr = buff;
    1f1c:	a0 e0       	ldi	r26, 0x00	; 0
    1f1e:	b1 e0       	ldi	r27, 0x01	; 1
    1f20:	01 c0       	rjmp	.+2      	; 0x1f24 <main+0x124>
    1f22:	d9 01       	movw	r26, r18
      addrPtr = (uint16_t)(void*)address;
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
    1f24:	9c 91       	ld	r25, X
    1f26:	9d 01       	movw	r18, r26
    1f28:	2e 5f       	subi	r18, 0xFE	; 254
    1f2a:	3f 4f       	sbci	r19, 0xFF	; 255
        a |= (*bufPtr++) << 8;
    1f2c:	11 96       	adiw	r26, 0x01	; 1
    1f2e:	8c 91       	ld	r24, X
    1f30:	11 97       	sbiw	r26, 0x01	; 1
    1f32:	89 27       	eor	r24, r25
    1f34:	98 27       	eor	r25, r24
    1f36:	89 27       	eor	r24, r25
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    1f38:	0c 01       	movw	r0, r24
    1f3a:	c7 be       	out	0x37, r12	; 55
    1f3c:	e8 95       	spm
    1f3e:	11 24       	eor	r1, r1
        addrPtr += 2;
    1f40:	32 96       	adiw	r30, 0x02	; 2
      } while (--ch);
    1f42:	ae 33       	cpi	r26, 0x3E	; 62
    1f44:	b1 40       	sbci	r27, 0x01	; 1
    1f46:	69 f7       	brne	.-38     	; 0x1f22 <main+0x122>

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    1f48:	fe 01       	movw	r30, r28
    1f4a:	97 be       	out	0x37, r9	; 55
    1f4c:	e8 95       	spm
      boot_spm_busy_wait();
    1f4e:	07 b6       	in	r0, 0x37	; 55
    1f50:	00 fc       	sbrc	r0, 0
    1f52:	fd cf       	rjmp	.-6      	; 0x1f4e <main+0x14e>

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    1f54:	87 be       	out	0x37, r8	; 55
    1f56:	e8 95       	spm
    1f58:	28 c0       	rjmp	.+80     	; 0x1faa <main+0x1aa>
#endif

    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    1f5a:	84 37       	cpi	r24, 0x74	; 116
    1f5c:	a9 f4       	brne	.+42     	; 0x1f88 <main+0x188>
      // READ PAGE - we only read flash
      getch();			/* getlen() */
    1f5e:	2c d0       	rcall	.+88     	; 0x1fb8 <getch>
      length = getch();
    1f60:	2b d0       	rcall	.+86     	; 0x1fb8 <getch>
    1f62:	b8 2e       	mov	r11, r24
      getch();
    1f64:	29 d0       	rcall	.+82     	; 0x1fb8 <getch>

      verifySpace();
    1f66:	2f d0       	rcall	.+94     	; 0x1fc6 <verifySpace>
    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
      // READ PAGE - we only read flash
      getch();			/* getlen() */
      length = getch();
    1f68:	ab 2c       	mov	r10, r11
      getch();

      verifySpace();
    1f6a:	fe 01       	movw	r30, r28
        putch(result);
        address++;
      }
      while (--length);
#else
      do putch(pgm_read_byte_near(address++));
    1f6c:	8f 01       	movw	r16, r30
    1f6e:	0f 5f       	subi	r16, 0xFF	; 255
    1f70:	1f 4f       	sbci	r17, 0xFF	; 255
    1f72:	84 91       	lpm	r24, Z
    1f74:	1d d0       	rcall	.+58     	; 0x1fb0 <putch>
      while (--length);
    1f76:	aa 94       	dec	r10
        putch(result);
        address++;
      }
      while (--length);
#else
      do putch(pgm_read_byte_near(address++));
    1f78:	f8 01       	movw	r30, r16
      while (--length);
    1f7a:	a1 10       	cpse	r10, r1
    1f7c:	f7 cf       	rjmp	.-18     	; 0x1f6c <main+0x16c>
    1f7e:	21 96       	adiw	r28, 0x01	; 1
    1f80:	ba 94       	dec	r11
    1f82:	cb 0d       	add	r28, r11
    1f84:	d1 1d       	adc	r29, r1
    1f86:	11 c0       	rjmp	.+34     	; 0x1faa <main+0x1aa>
#endif
#endif
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    1f88:	85 37       	cpi	r24, 0x75	; 117
    1f8a:	41 f4       	brne	.+16     	; 0x1f9c <main+0x19c>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    1f8c:	1c d0       	rcall	.+56     	; 0x1fc6 <verifySpace>
      putch(SIGNATURE_0);
    1f8e:	8e e1       	ldi	r24, 0x1E	; 30
    1f90:	0f d0       	rcall	.+30     	; 0x1fb0 <putch>
      putch(SIGNATURE_1);
    1f92:	83 e9       	ldi	r24, 0x93	; 147
    1f94:	0d d0       	rcall	.+26     	; 0x1fb0 <putch>
      putch(SIGNATURE_2);
    1f96:	87 e0       	ldi	r24, 0x07	; 7
    1f98:	0b d0       	rcall	.+22     	; 0x1fb0 <putch>
    1f9a:	07 c0       	rjmp	.+14     	; 0x1faa <main+0x1aa>
    }
    else if (ch == 'Q') {
    1f9c:	81 35       	cpi	r24, 0x51	; 81
    1f9e:	21 f4       	brne	.+8      	; 0x1fa8 <main+0x1a8>
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    1fa0:	e1 bc       	out	0x21, r14	; 33
  WDTCSR = x;
    1fa2:	d1 bc       	out	0x21, r13	; 33
      putch(SIGNATURE_2);
    }
    else if (ch == 'Q') {
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
      verifySpace();
    1fa4:	10 d0       	rcall	.+32     	; 0x1fc6 <verifySpace>
    1fa6:	01 c0       	rjmp	.+2      	; 0x1faa <main+0x1aa>
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    1fa8:	0e d0       	rcall	.+28     	; 0x1fc6 <verifySpace>
    }
    putch(STK_OK);
    1faa:	80 e1       	ldi	r24, 0x10	; 16
    1fac:	01 d0       	rcall	.+2      	; 0x1fb0 <putch>
#endif

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
    1fae:	5e cf       	rjmp	.-324    	; 0x1e6c <main+0x6c>

00001fb0 <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
    1fb0:	5d 9b       	sbis	0x0b, 5	; 11
    1fb2:	fe cf       	rjmp	.-4      	; 0x1fb0 <putch>
  UDR0 = ch;
    1fb4:	8c b9       	out	0x0c, r24	; 12
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    1fb6:	08 95       	ret

00001fb8 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)))
    1fb8:	5f 9b       	sbis	0x0b, 7	; 11
    1fba:	fe cf       	rjmp	.-4      	; 0x1fb8 <getch>
    ;
  if (!(UCSR0A & _BV(FE0))) {
    1fbc:	5c 99       	sbic	0x0b, 4	; 11
    1fbe:	01 c0       	rjmp	.+2      	; 0x1fc2 <getch+0xa>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1fc0:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UDR0;
    1fc2:	8c b1       	in	r24, 0x0c	; 12
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    1fc4:	08 95       	ret

00001fc6 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    1fc6:	f8 df       	rcall	.-16     	; 0x1fb8 <getch>
    1fc8:	80 32       	cpi	r24, 0x20	; 32
    1fca:	29 f0       	breq	.+10     	; 0x1fd6 <verifySpace+0x10>
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    1fcc:	88 e1       	ldi	r24, 0x18	; 24
    1fce:	81 bd       	out	0x21, r24	; 33
  WDTCSR = x;
    1fd0:	88 e0       	ldi	r24, 0x08	; 8
    1fd2:	81 bd       	out	0x21, r24	; 33
    1fd4:	ff cf       	rjmp	.-2      	; 0x1fd4 <verifySpace+0xe>
  if (getch() != CRC_EOP) {
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    1fd6:	84 e1       	ldi	r24, 0x14	; 20
    1fd8:	eb cf       	rjmp	.-42     	; 0x1fb0 <putch>

00001fda <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    1fda:	cf 93       	push	r28
    1fdc:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    1fde:	ec df       	rcall	.-40     	; 0x1fb8 <getch>
    1fe0:	c1 50       	subi	r28, 0x01	; 1
    1fe2:	e9 f7       	brne	.-6      	; 0x1fde <getNch+0x4>
  verifySpace();
}
    1fe4:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    1fe6:	ef cf       	rjmp	.-34     	; 0x1fc6 <verifySpace>

00001fe8 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    1fe8:	98 e1       	ldi	r25, 0x18	; 24
    1fea:	91 bd       	out	0x21, r25	; 33
  WDTCSR = x;
    1fec:	81 bd       	out	0x21, r24	; 33
}
    1fee:	08 95       	ret

00001ff0 <appStart>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    1ff0:	88 e1       	ldi	r24, 0x18	; 24
    1ff2:	81 bd       	out	0x21, r24	; 33
  WDTCSR = x;
    1ff4:	11 bc       	out	0x21, r1	; 33
}

void appStart() {
  watchdogConfig(WATCHDOG_OFF);
  __asm__ __volatile__ (
    1ff6:	ee 27       	eor	r30, r30
    1ff8:	ff 27       	eor	r31, r31
    1ffa:	09 94       	ijmp
