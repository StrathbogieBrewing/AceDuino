
m8xt4m.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f6  00001e00  00001e00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00001ff6  0000028a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  00800060  00800060  0000028a  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000290  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000007e  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000014  00000000  00000000  0000032e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000594  00000000  00000000  00000342  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00001e00 <__ctors_end>:
	.section .text

mainEntry:

; *** test if bootloader requested by external reset ***
  in		TEMP, _SFR_IO_ADDR(MCUSR)
    1e00:	54 b7       	in	r21, 0x34	; 52

	; clear the external and watchdog reset flag
	wdr
    1e02:	a8 95       	wdr
  ldi   TEMPL, ~((1<<EXTRF) | (1<<WDRF))
    1e04:	85 ef       	ldi	r24, 0xF5	; 245
  out   _SFR_IO_ADDR(MCUSR), TEMPL
    1e06:	84 bf       	out	0x34, r24	; 52

	; disable watchdog timer
	ldi   TEMPL, (1<<WDCE) | (1<<WDE)
    1e08:	88 e1       	ldi	r24, 0x18	; 24
	sts   _SFR_MEM_ADDR(WDTCR), TEMPL
    1e0a:	80 93 41 00 	sts	0x0041, r24	; 0x800041 <__EEPROM_REGION_LENGTH__+0x7f0041>
	clr   TEMPL
    1e0e:	88 27       	eor	r24, r24
	sts   _SFR_MEM_ADDR(WDTCR), TEMPL
    1e10:	80 93 41 00 	sts	0x0041, r24	; 0x800041 <__EEPROM_REGION_LENGTH__+0x7f0041>

  ; jump to application code if not external reset
	sbrs	TEMP, EXTRF
    1e14:	51 ff       	sbrs	r21, 1
	rjmp	- (BOOTSTART << 1)
    1e16:	f4 c0       	rjmp	.+488    	; 0x2000 <__TEXT_REGION_LENGTH__>

00001e18 <programmerType>:
    1e18:	41 56       	subi	r20, 0x61	; 97
    1e1a:	52 42       	sbci	r21, 0x22	; 34
    1e1c:	4f 4f       	sbci	r20, 0xFF	; 255
    1e1e:	54 00       	.word	0x0054	; ????

00001e20 <signatureBytes>:
    1e20:	07 93       	lat	Z, r16
    1e22:	1e 00       	.word	0x001e	; ????

00001e24 <softwareVersion>:
    1e24:	32 33       	cpi	r19, 0x32	; 50
	...

00001e28 <startBootloader>:

; *** application boot entry point ***
startBootloader:
; *** initialise micro ***
	; initialise registers
	clr		ZERO
    1e28:	44 24       	eor	r4, r4
	; clear status register
	out		_SFR_IO_ADDR(SREG), ZERO
    1e2a:	4f be       	out	0x3f, r4	; 63
	; set up stack to top of available sram
	ldi		TEMPL, lo8(RAMEND)
    1e2c:	8f e5       	ldi	r24, 0x5F	; 95
	ldi		TEMPH, hi8(RAMEND)
    1e2e:	94 e0       	ldi	r25, 0x04	; 4
	out		_SFR_IO_ADDR(SPH), TEMPH
    1e30:	9e bf       	out	0x3e, r25	; 62
	out		_SFR_IO_ADDR(SPL), TEMPL
    1e32:	8d bf       	out	0x3d, r24	; 61

00001e34 <inituart>:


; *** initialise uart ***
inituart:
	; set baud rate to 9600 bps
	ldi     TEMP, 25
    1e34:	59 e1       	ldi	r21, 0x19	; 25
	sts     _SFR_MEM_ADDR(UBRRL), TEMP
    1e36:	50 93 29 00 	sts	0x0029, r21	; 0x800029 <__EEPROM_REGION_LENGTH__+0x7f0029>
	; clear txc
	ldi     TEMP, (1 << TXC)
    1e3a:	50 e4       	ldi	r21, 0x40	; 64
  sts     _SFR_MEM_ADDR(UCSRA), TEMP
    1e3c:	50 93 2b 00 	sts	0x002B, r21	; 0x80002b <__EEPROM_REGION_LENGTH__+0x7f002b>
	; enable rx and tx
	ldi     TEMP, ((1 << RXEN) | (1 << TXEN))
    1e40:	58 e1       	ldi	r21, 0x18	; 24
	sts     _SFR_MEM_ADDR(UCSRB), TEMP
    1e42:	50 93 2a 00 	sts	0x002A, r21	; 0x80002a <__EEPROM_REGION_LENGTH__+0x7f002a>
	rjmp	  mainLoop
    1e46:	20 c0       	rjmp	.+64     	; 0x1e88 <mainLoop>

00001e48 <uartPut>:

; *** send subroutine (value in TEMP) ***
uartPut:
  ; force half duplex to block any echo if connected to a bus
	sts    _SFR_MEM_ADDR(UDR), TEMP
    1e48:	50 93 2c 00 	sts	0x002C, r21	; 0x80002c <__EEPROM_REGION_LENGTH__+0x7f002c>
	ldi     TEMP, ((1 << TXEN)) ; disable rx
    1e4c:	58 e0       	ldi	r21, 0x08	; 8
	sts     _SFR_MEM_ADDR(UCSRB), TEMP
    1e4e:	50 93 2a 00 	sts	0x002A, r21	; 0x80002a <__EEPROM_REGION_LENGTH__+0x7f002a>

00001e52 <uartTxLoop>:
uartTxLoop:
	lds    TEMP, _SFR_MEM_ADDR(UCSRA)
    1e52:	50 91 2b 00 	lds	r21, 0x002B	; 0x80002b <__EEPROM_REGION_LENGTH__+0x7f002b>
	sbrs   TEMP, TXC
    1e56:	56 ff       	sbrs	r21, 6
	rjmp   uartTxLoop
    1e58:	fc cf       	rjmp	.-8      	; 0x1e52 <uartTxLoop>
	ldi     TEMP, (1 << TXC)
    1e5a:	50 e4       	ldi	r21, 0x40	; 64
	sts     _SFR_MEM_ADDR(UCSRA), TEMP
    1e5c:	50 93 2b 00 	sts	0x002B, r21	; 0x80002b <__EEPROM_REGION_LENGTH__+0x7f002b>
	ldi     TEMP, ((1 << RXEN) | (1 << TXEN))  ; re-enable rx
    1e60:	58 e1       	ldi	r21, 0x18	; 24
	sts     _SFR_MEM_ADDR(UCSRB), TEMP
    1e62:	50 93 2a 00 	sts	0x002A, r21	; 0x80002a <__EEPROM_REGION_LENGTH__+0x7f002a>
	ret
    1e66:	08 95       	ret

00001e68 <uartPutString>:

; *** put string from progmem subroutine (LSB of address in R30) ***
uartPutString:
	ldi		ZH, hi8(BOOTSTART << 1)
    1e68:	fe e1       	ldi	r31, 0x1E	; 30
	lpm		TEMP, Z+
    1e6a:	55 91       	lpm	r21, Z+
	or		TEMP, TEMP
    1e6c:	55 2b       	or	r21, r21
	breq	uartPutStringExit
    1e6e:	11 f0       	breq	.+4      	; 0x1e74 <uartPutStringExit>
	rcall	uartPut
    1e70:	eb df       	rcall	.-42     	; 0x1e48 <uartPut>
	rjmp	uartPutString
    1e72:	fa cf       	rjmp	.-12     	; 0x1e68 <uartPutString>

00001e74 <uartPutStringExit>:
uartPutStringExit:
	ret
    1e74:	08 95       	ret

00001e76 <uartGet>:

; *** receive subroutine (value returned in RXCHAR) ***
uartGet:
	lds     RXCHAR, _SFR_MEM_ADDR(UCSRA)
    1e76:	40 91 2b 00 	lds	r20, 0x002B	; 0x80002b <__EEPROM_REGION_LENGTH__+0x7f002b>
	sbrs    RXCHAR, RXC
    1e7a:	47 ff       	sbrs	r20, 7
	rjmp	  uartGet
    1e7c:	fc cf       	rjmp	.-8      	; 0x1e76 <uartGet>
	lds     RXCHAR, _SFR_MEM_ADDR(UDR)
    1e7e:	40 91 2c 00 	lds	r20, 0x002C	; 0x80002c <__EEPROM_REGION_LENGTH__+0x7f002c>
	ret
    1e82:	08 95       	ret

00001e84 <uartPutReturnAndMainLoop>:

; *** send return character and fall back into main loop ***
uartPutReturnAndMainLoop:
	ldi		TEMP, '\r'
    1e84:	5d e0       	ldi	r21, 0x0D	; 13

00001e86 <uartPutAndMainLoop>:
uartPutAndMainLoop:
	rcall 	uartPut
    1e86:	e0 df       	rcall	.-64     	; 0x1e48 <uartPut>

00001e88 <mainLoop>:

; *** main program loop ***
mainLoop:

	; get received character
	rcall	uartGet
    1e88:	f6 df       	rcall	.-20     	; 0x1e76 <uartGet>

00001e8a <blockSupport>:

blockSupport:
	cpi		RXCHAR, 'b'
    1e8a:	42 36       	cpi	r20, 0x62	; 98
	brne	readBlock
    1e8c:	31 f4       	brne	.+12     	; 0x1e9a <readBlock>
	ldi		TEMP, 'Y'
    1e8e:	59 e5       	ldi	r21, 0x59	; 89
	rcall	uartPut
    1e90:	db df       	rcall	.-74     	; 0x1e48 <uartPut>
	ldi		TEMP, 0
    1e92:	50 e0       	ldi	r21, 0x00	; 0
	rcall	uartPut
    1e94:	d9 df       	rcall	.-78     	; 0x1e48 <uartPut>
	ldi		TEMP, BUFFERSIZE
    1e96:	50 e4       	ldi	r21, 0x40	; 64
  rjmp uartPutAndMainLoop
    1e98:	f6 cf       	rjmp	.-20     	; 0x1e86 <uartPutAndMainLoop>

00001e9a <readBlock>:

readBlock:
	cpi		RXCHAR, 'g'
    1e9a:	47 36       	cpi	r20, 0x67	; 103
	brne	writeBlock
    1e9c:	e9 f4       	brne	.+58     	; 0x1ed8 <writeBlock>
	rcall	uartGet
    1e9e:	eb df       	rcall	.-42     	; 0x1e76 <uartGet>
	ldi		TEMPH, 0			; limit buffer size to 256 characters
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
	rcall	uartGet
    1ea2:	e9 df       	rcall	.-46     	; 0x1e76 <uartGet>
	mov		TEMPL, RXCHAR
    1ea4:	84 2f       	mov	r24, r20
	rcall	uartGet
    1ea6:	e7 df       	rcall	.-50     	; 0x1e76 <uartGet>
	cpi		RXCHAR, 'E'
    1ea8:	45 34       	cpi	r20, 0x45	; 69
	breq	readEeprom
    1eaa:	59 f0       	breq	.+22     	; 0x1ec2 <readEeprom>

00001eac <readFlash>:

readFlash:
	movw	ZL, ADDRL
    1eac:	fd 01       	movw	r30, r26
	add		ZL, ZL
    1eae:	ee 0f       	add	r30, r30
	adc		ZH, ZH
    1eb0:	ff 1f       	adc	r31, r31

00001eb2 <readFlashLoop>:
readFlashLoop:
	lpm		TEMP, Z+
    1eb2:	55 91       	lpm	r21, Z+
	rcall	uartPut
    1eb4:	c9 df       	rcall	.-110    	; 0x1e48 <uartPut>
	lpm		TEMP, Z+
    1eb6:	55 91       	lpm	r21, Z+
	rcall	uartPut
    1eb8:	c7 df       	rcall	.-114    	; 0x1e48 <uartPut>
	adiw	ADDRL, 1
    1eba:	11 96       	adiw	r26, 0x01	; 1
	sbiw	TEMPL, 2
    1ebc:	02 97       	sbiw	r24, 0x02	; 2
	brne	readFlashLoop
    1ebe:	c9 f7       	brne	.-14     	; 0x1eb2 <readFlashLoop>
	rjmp	readDone
    1ec0:	0a c0       	rjmp	.+20     	; 0x1ed6 <readDone>

00001ec2 <readEeprom>:

readEeprom:
	sbic 	_SFR_IO_ADDR(EECR), EEWE
    1ec2:	e1 99       	sbic	0x1c, 1	; 28
	rjmp 	readEeprom
    1ec4:	fe cf       	rjmp	.-4      	; 0x1ec2 <readEeprom>
	out 	_SFR_IO_ADDR(EEARH), ADDRH
    1ec6:	bf bb       	out	0x1f, r27	; 31
	out 	_SFR_IO_ADDR(EEARL), ADDRL
    1ec8:	ae bb       	out	0x1e, r26	; 30
	sbi 	_SFR_IO_ADDR(EECR), EERE
    1eca:	e0 9a       	sbi	0x1c, 0	; 28
	in 		TEMP, _SFR_IO_ADDR(EEDR)
    1ecc:	5d b3       	in	r21, 0x1d	; 29
	rcall	uartPut
    1ece:	bc df       	rcall	.-136    	; 0x1e48 <uartPut>
	adiw	ADDRL, 1
    1ed0:	11 96       	adiw	r26, 0x01	; 1
	sbiw	TEMPL, 1
    1ed2:	01 97       	sbiw	r24, 0x01	; 1
	brne	readEeprom
    1ed4:	b1 f7       	brne	.-20     	; 0x1ec2 <readEeprom>

00001ed6 <readDone>:

readDone:
	rjmp	mainLoop
    1ed6:	d8 cf       	rjmp	.-80     	; 0x1e88 <mainLoop>

00001ed8 <writeBlock>:

writeBlock:
	cpi		RXCHAR, 'B'
    1ed8:	42 34       	cpi	r20, 0x42	; 66
	breq	writeGetParams
    1eda:	09 f0       	breq	.+2      	; 0x1ede <writeGetParams>
	rjmp	autoIncrement
    1edc:	40 c0       	rjmp	.+128    	; 0x1f5e <autoIncrement>

00001ede <writeGetParams>:

writeGetParams:
	rcall	uartGet
    1ede:	cb df       	rcall	.-106    	; 0x1e76 <uartGet>
	ldi		TEMPH, 0					; limit buffer size to 256 characters
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
	rcall	uartGet
    1ee2:	c9 df       	rcall	.-110    	; 0x1e76 <uartGet>
	mov		TEMPL, RXCHAR
    1ee4:	84 2f       	mov	r24, r20
	rcall	uartGet
    1ee6:	c7 df       	rcall	.-114    	; 0x1e76 <uartGet>
	mov		STATUS, RXCHAR
    1ee8:	04 2f       	mov	r16, r20
	movw	WORDL, TEMPL
    1eea:	9c 01       	movw	r18, r24
	ldi		YL, lo8(buffer)
    1eec:	c0 e6       	ldi	r28, 0x60	; 96
	ldi		YH, hi8(buffer)
    1eee:	d0 e0       	ldi	r29, 0x00	; 0

00001ef0 <writeGetData>:

writeGetData:
	rcall	uartGet
    1ef0:	c2 df       	rcall	.-124    	; 0x1e76 <uartGet>
	st		Y+, RXCHAR
    1ef2:	49 93       	st	Y+, r20
	sbiw	TEMPL, 1
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
	brne	writeGetData
    1ef6:	e1 f7       	brne	.-8      	; 0x1ef0 <writeGetData>
	ldi		YL, lo8(buffer)
    1ef8:	c0 e6       	ldi	r28, 0x60	; 96
	ldi		YH, hi8(buffer)
    1efa:	d0 e0       	ldi	r29, 0x00	; 0
	movw	TEMPL, WORDL
    1efc:	c9 01       	movw	r24, r18
	cpi		STATUS, 'E'
    1efe:	05 34       	cpi	r16, 0x45	; 69
	brne	writeFlash
    1f00:	61 f4       	brne	.+24     	; 0x1f1a <writeFlash>

00001f02 <writeEeprom>:

writeEeprom:
	ld		TEMP, Y+
    1f02:	59 91       	ld	r21, Y+

00001f04 <writeEepromWait>:
writeEepromWait:
	sbic 	_SFR_IO_ADDR(EECR), EEWE
    1f04:	e1 99       	sbic	0x1c, 1	; 28
	rjmp 	writeEepromWait
    1f06:	fe cf       	rjmp	.-4      	; 0x1f04 <writeEepromWait>
	out 	_SFR_IO_ADDR(EEARH), ADDRH
    1f08:	bf bb       	out	0x1f, r27	; 31
	out 	_SFR_IO_ADDR(EEARL), ADDRL
    1f0a:	ae bb       	out	0x1e, r26	; 30
	out 	_SFR_IO_ADDR(EEDR), TEMP
    1f0c:	5d bb       	out	0x1d, r21	; 29
	sbi 	_SFR_IO_ADDR(EECR), EEMWE
    1f0e:	e2 9a       	sbi	0x1c, 2	; 28
	sbi 	_SFR_IO_ADDR(EECR), EEWE
    1f10:	e1 9a       	sbi	0x1c, 1	; 28
	adiw	ADDRL, 1
    1f12:	11 96       	adiw	r26, 0x01	; 1
	sbiw	TEMPL, 1
    1f14:	01 97       	sbiw	r24, 0x01	; 1
	brne	writeEeprom
    1f16:	a9 f7       	brne	.-22     	; 0x1f02 <writeEeprom>
	rjmp	uartPutReturnAndMainLoop
    1f18:	b5 cf       	rjmp	.-150    	; 0x1e84 <uartPutReturnAndMainLoop>

00001f1a <writeFlash>:

writeFlash:
	sbic 	_SFR_IO_ADDR(EECR), EEWE
    1f1a:	e1 99       	sbic	0x1c, 1	; 28
	rjmp 	writeFlash
    1f1c:	fe cf       	rjmp	.-4      	; 0x1f1a <writeFlash>
	movw	ZL, ADDRL
    1f1e:	fd 01       	movw	r30, r26
	add		ZL, ZL
    1f20:	ee 0f       	add	r30, r30
	adc		ZH, ZH
    1f22:	ff 1f       	adc	r31, r31
	movw	WORDL, ZL
    1f24:	9f 01       	movw	r18, r30

	ldi 	TEMP, (1<<PGERS) | (1<<SPMEN)		; page erase
    1f26:	53 e0       	ldi	r21, 0x03	; 3
	rcall	writeFlashSPM
    1f28:	0d d0       	rcall	.+26     	; 0x1f44 <writeFlashSPM>
	ldi 	TEMP, (1<<RWWSRE) | (1<<SPMEN)		; re-enable the RWW section
    1f2a:	51 e1       	ldi	r21, 0x11	; 17
	rcall	writeFlashSPM
    1f2c:	0b d0       	rcall	.+22     	; 0x1f44 <writeFlashSPM>

00001f2e <writeFlashLoop>:

writeFlashLoop:
	ld		R0, Y+
    1f2e:	09 90       	ld	r0, Y+
	ld		R1, Y+
    1f30:	19 90       	ld	r1, Y+
	ldi 	TEMP, (1<<SPMEN)					; copy word to flash write buffer
    1f32:	51 e0       	ldi	r21, 0x01	; 1
	rcall	writeFlashSPM
    1f34:	07 d0       	rcall	.+14     	; 0x1f44 <writeFlashSPM>
	adiw	ZL, 2
    1f36:	32 96       	adiw	r30, 0x02	; 2
	adiw	ADDRL, 1
    1f38:	11 96       	adiw	r26, 0x01	; 1
	sbiw	TEMPL, 2
    1f3a:	02 97       	sbiw	r24, 0x02	; 2
	brne	writeFlashLoop
    1f3c:	c1 f7       	brne	.-16     	; 0x1f2e <writeFlashLoop>

	movw	ZL, WORDL
    1f3e:	f9 01       	movw	r30, r18
	rcall	writeFlashPage
    1f40:	07 d0       	rcall	.+14     	; 0x1f50 <writeFlashPage>
	rjmp	uartPutReturnAndMainLoop
    1f42:	a0 cf       	rjmp	.-192    	; 0x1e84 <uartPutReturnAndMainLoop>

00001f44 <writeFlashSPM>:

writeFlashSPM:
	in 		STATUS, _SFR_IO_ADDR(SPMCR)			; check for previous SPM complete
    1f44:	07 b7       	in	r16, 0x37	; 55
	sbrc 	STATUS, SPMEN
    1f46:	00 fd       	sbrc	r16, 0
	rjmp 	writeFlashSPM
    1f48:	fd cf       	rjmp	.-6      	; 0x1f44 <writeFlashSPM>
	out 	_SFR_IO_ADDR(SPMCR), TEMP			; execute spm with action given by TEMP
    1f4a:	57 bf       	out	0x37, r21	; 55
	spm
    1f4c:	e8 95       	spm
	ret
    1f4e:	08 95       	ret

00001f50 <writeFlashPage>:

writeFlashPage:
	cpi		ZH, hi8(BOOTSTART << 1)
    1f50:	fe 31       	cpi	r31, 0x1E	; 30
	brsh	writeBootLoaderInhibit
    1f52:	20 f4       	brcc	.+8      	; 0x1f5c <writeBootLoaderInhibit>
	ldi 	TEMP, (1<<PGWRT) | (1<<SPMEN)		; execute page write
    1f54:	55 e0       	ldi	r21, 0x05	; 5
	rcall	writeFlashSPM
    1f56:	f6 df       	rcall	.-20     	; 0x1f44 <writeFlashSPM>
	ldi 	TEMP, (1<<RWWSRE) | (1<<SPMEN)	; re-enable the RWW section
    1f58:	51 e1       	ldi	r21, 0x11	; 17
	rcall	writeFlashSPM
    1f5a:	f4 df       	rcall	.-24     	; 0x1f44 <writeFlashSPM>

00001f5c <writeBootLoaderInhibit>:
writeBootLoaderInhibit:
	ret
    1f5c:	08 95       	ret

00001f5e <autoIncrement>:

autoIncrement:
	cpi		RXCHAR, 'a'
    1f5e:	41 36       	cpi	r20, 0x61	; 97
	brne	setAddress
    1f60:	11 f4       	brne	.+4      	; 0x1f66 <setAddress>

00001f62 <autoIncrementSupported>:
autoIncrementSupported:
	ldi		TEMP, 'Y'
    1f62:	59 e5       	ldi	r21, 0x59	; 89
  rjmp uartPutAndMainLoop
    1f64:	90 cf       	rjmp	.-224    	; 0x1e86 <uartPutAndMainLoop>

00001f66 <setAddress>:

setAddress:
	cpi		RXCHAR, 'A'
    1f66:	41 34       	cpi	r20, 0x41	; 65
	brne	eraseChip
    1f68:	29 f4       	brne	.+10     	; 0x1f74 <eraseChip>
	rcall	uartGet
    1f6a:	85 df       	rcall	.-246    	; 0x1e76 <uartGet>
	mov		ADDRH, RXCHAR
    1f6c:	b4 2f       	mov	r27, r20
	rcall	uartGet
    1f6e:	83 df       	rcall	.-250    	; 0x1e76 <uartGet>
	mov		ADDRL, RXCHAR
    1f70:	a4 2f       	mov	r26, r20
	rjmp	uartPutReturnAndMainLoop
    1f72:	88 cf       	rjmp	.-240    	; 0x1e84 <uartPutReturnAndMainLoop>

00001f74 <eraseChip>:

eraseChip:
	cpi		RXCHAR, 'e'							; dont do anything because we erase page by page
    1f74:	45 36       	cpi	r20, 0x65	; 101
	brne	exitBootloader
    1f76:	09 f4       	brne	.+2      	; 0x1f7a <exitBootloader>
	rjmp	uartPutReturnAndMainLoop
    1f78:	85 cf       	rjmp	.-246    	; 0x1e84 <uartPutReturnAndMainLoop>

00001f7a <exitBootloader>:

exitBootloader:
	cpi		RXCHAR, 'E'
    1f7a:	45 34       	cpi	r20, 0x45	; 69
	brne	getProgrammerType
    1f7c:	31 f4       	brne	.+12     	; 0x1f8a <getProgrammerType>
	ldi		TEMP, '\r'
    1f7e:	5d e0       	ldi	r21, 0x0D	; 13
	rcall 	uartPut
    1f80:	63 df       	rcall	.-314    	; 0x1e48 <uartPut>
  ldi   TEMP, (1 << WDE)  ; force watchdog reset
    1f82:	58 e0       	ldi	r21, 0x08	; 8
  sts   _SFR_MEM_ADDR(WDTCR), TEMP
    1f84:	50 93 41 00 	sts	0x0041, r21	; 0x800041 <__EEPROM_REGION_LENGTH__+0x7f0041>

00001f88 <infiniteLoop>:
infiniteLoop:
  rjmp  infiniteLoop
    1f88:	ff cf       	rjmp	.-2      	; 0x1f88 <infiniteLoop>

00001f8a <getProgrammerType>:

getProgrammerType:
	cpi		RXCHAR, 'p'
    1f8a:	40 37       	cpi	r20, 0x70	; 112
	brne	reportSupportedDeviceCodes
    1f8c:	11 f4       	brne	.+4      	; 0x1f92 <reportSupportedDeviceCodes>
	ldi		TEMP, 'S'
    1f8e:	53 e5       	ldi	r21, 0x53	; 83
  rjmp  uartPutAndMainLoop
    1f90:	7a cf       	rjmp	.-268    	; 0x1e86 <uartPutAndMainLoop>

00001f92 <reportSupportedDeviceCodes>:

reportSupportedDeviceCodes:
	cpi		RXCHAR, 't'
    1f92:	44 37       	cpi	r20, 0x74	; 116
	brne	setLED
    1f94:	21 f4       	brne	.+8      	; 0x1f9e <setLED>
	ldi		TEMP, PART_CODE
    1f96:	59 e7       	ldi	r21, 0x79	; 121
	rcall	uartPut
    1f98:	57 df       	rcall	.-338    	; 0x1e48 <uartPut>
	ldi		TEMP, 0x00
    1f9a:	50 e0       	ldi	r21, 0x00	; 0
  rjmp uartPutAndMainLoop
    1f9c:	74 cf       	rjmp	.-280    	; 0x1e86 <uartPutAndMainLoop>

00001f9e <setLED>:

setLED:
	cpi		RXCHAR, 'x'
    1f9e:	48 37       	cpi	r20, 0x78	; 120
	breq	getByteAndPutReturnAndMainLoop
    1fa0:	11 f0       	breq	.+4      	; 0x1fa6 <getByteAndPutReturnAndMainLoop>

00001fa2 <clearLED>:

clearLED:
	cpi		RXCHAR, 'y'
    1fa2:	49 37       	cpi	r20, 0x79	; 121
	brne	enterProgrammingMode
    1fa4:	11 f4       	brne	.+4      	; 0x1faa <enterProgrammingMode>

00001fa6 <getByteAndPutReturnAndMainLoop>:

getByteAndPutReturnAndMainLoop:
	rcall 	uartGet
    1fa6:	67 df       	rcall	.-306    	; 0x1e76 <uartGet>

00001fa8 <putReturnAndMainLoop>:
putReturnAndMainLoop:
	rjmp	uartPutReturnAndMainLoop
    1fa8:	6d cf       	rjmp	.-294    	; 0x1e84 <uartPutReturnAndMainLoop>

00001faa <enterProgrammingMode>:

enterProgrammingMode:
	cpi		RXCHAR, 'P'
    1faa:	40 35       	cpi	r20, 0x50	; 80
	breq	putReturnAndMainLoop
    1fac:	e9 f3       	breq	.-6      	; 0x1fa8 <putReturnAndMainLoop>

00001fae <leaveProgrammingMode>:

leaveProgrammingMode:
	cpi		RXCHAR, 'L'
    1fae:	4c 34       	cpi	r20, 0x4C	; 76
	breq	putReturnAndMainLoop
    1fb0:	d9 f3       	breq	.-10     	; 0x1fa8 <putReturnAndMainLoop>

00001fb2 <getFuseBytes>:

getFuseBytes:
	cpi		RXCHAR, 'r'
    1fb2:	42 37       	cpi	r20, 0x72	; 114
	breq	putZeroAndMainLoop
    1fb4:	f1 f0       	breq	.+60     	; 0x1ff2 <putZeroAndMainLoop>
	cpi		RXCHAR, 'F'
    1fb6:	46 34       	cpi	r20, 0x46	; 70
	breq	putZeroAndMainLoop
    1fb8:	e1 f0       	breq	.+56     	; 0x1ff2 <putZeroAndMainLoop>
	cpi		RXCHAR, 'N'
    1fba:	4e 34       	cpi	r20, 0x4E	; 78
	breq	putZeroAndMainLoop
    1fbc:	d1 f0       	breq	.+52     	; 0x1ff2 <putZeroAndMainLoop>
	cpi		RXCHAR, 'Q'
    1fbe:	41 35       	cpi	r20, 0x51	; 81
	breq	putZeroAndMainLoop
    1fc0:	c1 f0       	breq	.+48     	; 0x1ff2 <putZeroAndMainLoop>

00001fc2 <setDeviceType>:

setDeviceType:
	cpi		RXCHAR, 'T'
    1fc2:	44 35       	cpi	r20, 0x54	; 84
	brne	returnProgrammerID
    1fc4:	11 f4       	brne	.+4      	; 0x1fca <returnProgrammerID>
	rcall uartGet
    1fc6:	57 df       	rcall	.-338    	; 0x1e76 <uartGet>
	rjmp	uartPutReturnAndMainLoop
    1fc8:	5d cf       	rjmp	.-326    	; 0x1e84 <uartPutReturnAndMainLoop>

00001fca <returnProgrammerID>:

returnProgrammerID:
	cpi		RXCHAR, 'S'
    1fca:	43 35       	cpi	r20, 0x53	; 83
	brne	returnSoftwareVersion
    1fcc:	19 f4       	brne	.+6      	; 0x1fd4 <returnSoftwareVersion>
	ldi		ZL, lo8(programmerType)
    1fce:	e8 e1       	ldi	r30, 0x18	; 24
	ldi   ZH, hi8(programmerType)
    1fd0:	fe e1       	ldi	r31, 0x1E	; 30
	rjmp	putString
    1fd2:	09 c0       	rjmp	.+18     	; 0x1fe6 <putString>

00001fd4 <returnSoftwareVersion>:

returnSoftwareVersion:
	cpi		RXCHAR, 'V'
    1fd4:	46 35       	cpi	r20, 0x56	; 86
	brne	returnSignatureBytes
    1fd6:	19 f4       	brne	.+6      	; 0x1fde <returnSignatureBytes>
	ldi		ZL, lo8(softwareVersion)
    1fd8:	e4 e2       	ldi	r30, 0x24	; 36
	ldi		ZH, hi8(softwareVersion)
    1fda:	fe e1       	ldi	r31, 0x1E	; 30
	rjmp	putString
    1fdc:	04 c0       	rjmp	.+8      	; 0x1fe6 <putString>

00001fde <returnSignatureBytes>:

returnSignatureBytes:
	cpi		RXCHAR, 's'
    1fde:	43 37       	cpi	r20, 0x73	; 115
	brne	syncCharacter
    1fe0:	21 f4       	brne	.+8      	; 0x1fea <syncCharacter>
	ldi		ZL, lo8(signatureBytes)
    1fe2:	e0 e2       	ldi	r30, 0x20	; 32
	ldi   ZH, hi8(signatureBytes)
    1fe4:	fe e1       	ldi	r31, 0x1E	; 30

00001fe6 <putString>:
putString:
	rcall	uartPutString
    1fe6:	40 df       	rcall	.-384    	; 0x1e68 <uartPutString>

00001fe8 <syncCharacterDone>:
syncCharacterDone:
	rjmp	mainLoop
    1fe8:	4f cf       	rjmp	.-354    	; 0x1e88 <mainLoop>

00001fea <syncCharacter>:

syncCharacter:
	cpi		RXCHAR, 0x1b
    1fea:	4b 31       	cpi	r20, 0x1B	; 27
	breq	syncCharacterDone
    1fec:	e9 f3       	breq	.-6      	; 0x1fe8 <syncCharacterDone>
	ldi		TEMP, '?'
    1fee:	5f e3       	ldi	r21, 0x3F	; 63
  rjmp	uartPutAndMainLoop
    1ff0:	4a cf       	rjmp	.-364    	; 0x1e86 <uartPutAndMainLoop>

00001ff2 <putZeroAndMainLoop>:

putZeroAndMainLoop:
	ldi		TEMP, 0
    1ff2:	50 e0       	ldi	r21, 0x00	; 0
	rjmp	uartPutAndMainLoop
    1ff4:	48 cf       	rjmp	.-368    	; 0x1e86 <uartPutAndMainLoop>
